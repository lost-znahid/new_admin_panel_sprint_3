version: '3.8'

services:
  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${pg_user}
      POSTGRES_PASSWORD: ${pg_password}
      POSTGRES_DB: ${pg_db}
    ports:
      - "5432:5432"
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    networks:
      - esnet
    healthcheck:  # <-- Добавлен healthcheck для Postgres
      test: ["CMD-SHELL", "pg_isready -U ${pg_user} -d ${pg_db}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - esnet

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - http.host=0.0.0.0
    networks:
      - esnet
    healthcheck:  # <-- Добавлен healthcheck для Elasticsearch
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  etl:
    build: .
    depends_on:
      postgres:
        condition: service_healthy  # <-- Ждем, пока Postgres не станет healthy
      elasticsearch:
        condition: service_healthy  # <-- Ждем, пока Elasticsearch не станет healthy
      redis:
        condition: service_started  # Redis обычно запускается быстро
    env_file:
      - .env
    environment:
      POSTGRES_DSN: "postgresql://${pg_user}:${pg_password}@${pg_host}:${pg_port}/${pg_db}"
      REDIS_HOST: ${redis_host}
      REDIS_PORT: ${redis_port}
      REDIS_DB: ${redis_db}
      ES_HOST: ${es_host}
      ES_INDEX: ${es_index}
      BATCH_SIZE: ${batch_size}
      POLL_INTERVAL: ${poll_interval}
      BACKOFF_ON_ERROR: ${backoff_on_error}
    networks:
      - esnet

volumes:
  postgres_data:
  es_data:

networks:
  esnet:
    driver: bridge